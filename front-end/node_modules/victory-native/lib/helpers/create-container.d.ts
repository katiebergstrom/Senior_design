/// <reference types="react" />
export declare const createContainer: <TContainerA extends import("@/victory-core/lib").VictoryContainerProps | import("victory-create-container").ContainerType, TContainerB extends import("@/victory-core/lib").VictoryContainerProps | import("victory-create-container").ContainerType>(containerA: TContainerA extends import("victory-create-container").ContainerType ? TContainerA : import("victory-create-container").ContainerType, containerB: TContainerB extends import("victory-create-container").ContainerType ? TContainerB : import("victory-create-container").ContainerType) => {
    (props: TContainerA extends import("victory-create-container").ContainerType ? TContainerB extends import("victory-create-container").ContainerType ? import("react").ComponentProps<{
        zoom: {
            (initialProps: import("../components/victory-zoom-container").VictoryZoomContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-zoom-container").VictoryZoomContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchPinch: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
        voronoi: {
            (initialProps: import("../components/victory-voronoi-container").VictoryVoronoiContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-voronoi-container").VictoryVoronoiContainerNativeProps): ({
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            } | {
                target: string;
                eventHandlers: {
                    onTouchStart?: undefined;
                    onTouchMove?: undefined;
                    onTouchEnd?: undefined;
                } | {
                    onTouchStart: () => null;
                    onTouchMove: () => null;
                    onTouchEnd: () => null;
                };
            })[];
        };
        selection: {
            (initialProps: import("../components/victory-selection-container").VictorySelectionContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-selection-container").VictorySelectionContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
        brush: {
            (initialProps: import("../components/victory-brush-container").VictoryBrushContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-brush-container").VictoryBrushContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
        cursor: {
            (initialProps: import("../components/victory-cursor-container").VictoryCursorContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-cursor-container").VictoryCursorContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
    }[TContainerA]> & import("react").ComponentProps<{
        zoom: {
            (initialProps: import("../components/victory-zoom-container").VictoryZoomContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-zoom-container").VictoryZoomContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchPinch: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
        voronoi: {
            (initialProps: import("../components/victory-voronoi-container").VictoryVoronoiContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-voronoi-container").VictoryVoronoiContainerNativeProps): ({
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            } | {
                target: string;
                eventHandlers: {
                    onTouchStart?: undefined;
                    onTouchMove?: undefined;
                    onTouchEnd?: undefined;
                } | {
                    onTouchStart: () => null;
                    onTouchMove: () => null;
                    onTouchEnd: () => null;
                };
            })[];
        };
        selection: {
            (initialProps: import("../components/victory-selection-container").VictorySelectionContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-selection-container").VictorySelectionContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
        brush: {
            (initialProps: import("../components/victory-brush-container").VictoryBrushContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-brush-container").VictoryBrushContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
        cursor: {
            (initialProps: import("../components/victory-cursor-container").VictoryCursorContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-cursor-container").VictoryCursorContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
    }[TContainerB]> : TContainerA & TContainerB : TContainerA & TContainerB): JSX.Element;
    displayName: string;
    role: string;
    defaultEvents(props: TContainerA extends import("victory-create-container").ContainerType ? TContainerB extends import("victory-create-container").ContainerType ? import("react").ComponentProps<{
        zoom: {
            (initialProps: import("../components/victory-zoom-container").VictoryZoomContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-zoom-container").VictoryZoomContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchPinch: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
        voronoi: {
            (initialProps: import("../components/victory-voronoi-container").VictoryVoronoiContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-voronoi-container").VictoryVoronoiContainerNativeProps): ({
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            } | {
                target: string;
                eventHandlers: {
                    onTouchStart?: undefined;
                    onTouchMove?: undefined;
                    onTouchEnd?: undefined;
                } | {
                    onTouchStart: () => null;
                    onTouchMove: () => null;
                    onTouchEnd: () => null;
                };
            })[];
        };
        selection: {
            (initialProps: import("../components/victory-selection-container").VictorySelectionContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-selection-container").VictorySelectionContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
        brush: {
            (initialProps: import("../components/victory-brush-container").VictoryBrushContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-brush-container").VictoryBrushContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
        cursor: {
            (initialProps: import("../components/victory-cursor-container").VictoryCursorContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-cursor-container").VictoryCursorContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
    }[TContainerA]> & import("react").ComponentProps<{
        zoom: {
            (initialProps: import("../components/victory-zoom-container").VictoryZoomContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-zoom-container").VictoryZoomContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchPinch: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
        voronoi: {
            (initialProps: import("../components/victory-voronoi-container").VictoryVoronoiContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-voronoi-container").VictoryVoronoiContainerNativeProps): ({
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            } | {
                target: string;
                eventHandlers: {
                    onTouchStart?: undefined;
                    onTouchMove?: undefined;
                    onTouchEnd?: undefined;
                } | {
                    onTouchStart: () => null;
                    onTouchMove: () => null;
                    onTouchEnd: () => null;
                };
            })[];
        };
        selection: {
            (initialProps: import("../components/victory-selection-container").VictorySelectionContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-selection-container").VictorySelectionContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
        brush: {
            (initialProps: import("../components/victory-brush-container").VictoryBrushContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-brush-container").VictoryBrushContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
        cursor: {
            (initialProps: import("../components/victory-cursor-container").VictoryCursorContainerNativeProps): JSX.Element;
            role: string;
            defaultEvents(initialProps: import("../components/victory-cursor-container").VictoryCursorContainerNativeProps): {
                target: string;
                eventHandlers: {
                    onTouchStart: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchMove: import("@/victory-core/lib").VictoryEventHandler;
                    onTouchEnd: import("@/victory-core/lib").VictoryEventHandler;
                };
            }[];
        };
    }[TContainerB]> : TContainerA & TContainerB : TContainerA & TContainerB): ({
        target: string;
        eventHandlers: any;
    } | null)[];
};
export default createContainer;
//# sourceMappingURL=create-container.d.ts.map